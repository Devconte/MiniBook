{
  "info": {
    "_postman_id": "simple-12345678-1234-1234-1234-123456789012",
    "name": "MiniBook API - Version Simple",
    "description": "Collection simple avec tout int√©gr√© - pas besoin d'environnement s√©par√©",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "üîê 1. Login (Faire en premier)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Sauvegarder le token si la connexion r√©ussit",
              "if (pm.response.code === 200) {",
              "    var response = pm.response.json();",
              "    if (response.token) {",
              "        pm.collectionVariables.set('auth_token', response.token);",
              "        console.log('‚úÖ Token sauvegard√©');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "http://localhost:5000/account/login",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["account", "login"]
        }
      }
    },
    {
      "name": "üìÑ 2. GET Tous les Posts",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status OK ou Auth required', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    var posts = pm.response.json();",
              "    if (posts.length > 0) {",
              "        pm.collectionVariables.set('first_post_id', posts[0].id);",
              "        console.log('‚úÖ Premier post ID sauvegard√©:', posts[0].id);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5000/api/posts",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "posts"]
        }
      }
    },
    {
      "name": "üîç 3. GET Post par ID",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5000/api/posts/{{first_post_id}}",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "posts", "{{first_post_id}}"]
        }
      }
    },
    {
      "name": "‚ûï 4. POST Cr√©er un Post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Post cr√©√© avec succ√®s', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 401, 403]);",
              "});",
              "",
              "if (pm.response.code === 201) {",
              "    var newPost = pm.response.json();",
              "    pm.collectionVariables.set('new_post_id', newPost.id);",
              "    console.log('‚úÖ Nouveau post cr√©√© avec ID:', newPost.id);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"Post de Test Postman\",\n    \"content\": \"Ceci est un test de cr√©ation de post via Postman. Tout fonctionne parfaitement !\",\n    \"userId\": 1\n}"
        },
        "url": {
          "raw": "http://localhost:5000/api/posts",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "posts"]
        }
      }
    },
    {
      "name": "‚úèÔ∏è 5. PUT Modifier le Post",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"title\": \"Post MODIFI√â via Postman\",\n    \"content\": \"Ce post a √©t√© modifi√© avec succ√®s ! La modification fonctionne parfaitement.\",\n    \"userId\": 1\n}"
        },
        "url": {
          "raw": "http://localhost:5000/api/posts/{{new_post_id}}",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "posts", "{{new_post_id}}"]
        }
      }
    },
    {
      "name": "üóëÔ∏è 6. DELETE Supprimer (Admin)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Delete response', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([204, 403, 404]);",
              "});",
              "",
              "if (pm.response.code === 403) {",
              "    console.log('‚ö†Ô∏è Acc√®s refus√© - Besoin du r√¥le Admin');",
              "} else if (pm.response.code === 204) {",
              "    console.log('‚úÖ Post supprim√© avec succ√®s');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:5000/api/posts/{{new_post_id}}",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "posts", "{{new_post_id}}"]
        }
      }
    },
    {
      "name": "‚ùå Test Sans Auth (doit √©chouer)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Acc√®s refus√© sans auth', function () {",
              "    pm.expect(pm.response.code).to.eql(401);",
              "});",
              "console.log('‚úÖ S√©curit√© OK - Acc√®s refus√© sans token');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5000/api/posts",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["api", "posts"]
        }
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": ["console.log('üöÄ Ex√©cution de:', pm.info.requestName);"]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('üìä Statut:', pm.response.code, pm.response.status);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "first_post_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "new_post_id",
      "value": "",
      "type": "string"
    }
  ]
}
